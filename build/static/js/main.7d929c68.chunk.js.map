{"version":3,"sources":["Todo.js","TodoList.js","App.js","index.js"],"names":["Todo","todo","toggleTodo","id","type","checked","complete","onChange","name","TodoList","todos","map","key","LOCAL_STORAGE_KEY","App","useState","setTodos","todoNameRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","length","newTodos","find","ref","placeholder","class","onClick","e","current","value","prevTodos","uuidv4","title","ReactDOM","render","document","getElementById"],"mappings":"mMAEe,SAASA,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAKnC,OACE,yBAAKC,GAAG,aACA,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,SAAUC,SANzD,WACEL,EAAWD,EAAKE,OAMR,8BAAOF,EAAKO,OCPT,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WACxC,OAEEQ,EAAMC,KAAI,SAAAV,GACN,OAAO,kBAACD,EAAD,CAAMY,IAAKX,EAAKE,GAAID,WAAYA,EAAYD,KAAMA,O,WCA3DY,EAAoB,gBAkFXC,MAhFf,WAAe,MAIYC,mBAAS,IAJrB,mBAIPL,EAJO,KAIAM,EAJA,KAORC,EAAcC,mBAwDpB,OAlDAC,qBAAU,WACT,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQX,IAEjDO,GACDJ,EAASI,KAET,IAGHD,qBAAU,WACTI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUhB,MACrD,CAACA,IAwCH,oCACE,yBAAKP,GAAG,aACN,wBAAIA,GAAG,cAAP,cAEA,yBAAKA,GAAG,aACN,yBAAKA,GAAG,cAAcO,EAAMiB,QAAO,SAAA1B,GAAI,OAAKA,EAAKK,YAAUsB,OAA3D,sBACA,kBAACnB,EAAD,CAAUC,MAAOA,EAAOR,WAzC/B,SAAoBC,GAEnB,IAAM0B,EAAQ,YAAOnB,GAGfT,EAAO4B,EAASC,MAAK,SAAC7B,GAAD,OAAUA,EAAKE,KAAOA,KAGjDF,EAAKK,UAAYL,EAAKK,SACtBU,EAASa,IAgC6C1B,GAAG,eACnD,2BAAO4B,IAAKd,EAAab,KAAK,OAAOD,GAAG,aAAa6B,YAAY,mBACjE,uBAAGC,MAAM,0BAA0BC,QA7B1C,SAAuBC,GACtB,IAAM3B,EAAOS,EAAYmB,QAAQC,MACpB,KAAT7B,IAKJQ,GAAS,SAACsB,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAEnC,GAAIoC,eAAU/B,KAAMA,EAAMF,UAAU,QAI7DW,EAAYmB,QAAQC,MAAQ,OAiBqCG,MAAM,gBAAgBrC,GAAG,oBACpF,uBAAG8B,MAAM,wBAAwBC,QAfvC,WACE,IAAML,EAAWnB,EAAMiB,QAAO,SAAA1B,GAAI,OAAKA,EAAKK,YAC5CU,EAASa,IAauDW,MAAM,yBAAyBrC,GAAG,2BC9EtGsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7d929c68.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Todo({ todo, toggleTodo }) {\n  function handleTodoClick(){\n    toggleTodo(todo.id)\n  }\n\n  return (\n    <div id=\"todo-item\">\n            <input type=\"checkbox\" checked={todo.complete} onChange={handleTodoClick} />\n            <span>{todo.name}</span>\n    </div>\n  )\n}\n","import React from 'react'\nimport Todo from './Todo'\n\nexport default function TodoList({ todos, toggleTodo }) {\n  return (\n    // the map method creates a new array by returning a Todo component for each element in the original todos array\n    todos.map(todo => {\n        return <Todo key={todo.id} toggleTodo={toggleTodo} todo={todo} />\n    })\n  )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport './styles.css'\nimport TodoList from \"./TodoList\";\n// imports v4 function from the uuid library and assigns it to the variable uuidv4\n// v4 function generates a random UUID (Universally Unique Identifier) using the version 4 algorithm\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\";\n\nfunction App() {\n\t// declares a state variable named \"todos\" using the useState hook\n\t// the \"todos\" variable is initialized with an array\n\t// a function called \"setTodos\" is declared, that is used to update the value of the \"todos\" variable\n\tconst [todos, setTodos] = useState([]);\n\n\t// gets the name of the todo entered in the input box using the useRef hook\n\tconst todoNameRef = useRef();\n\n\n\t// ************************ SAVING EXISTING TODOS TO LOCAL STORAGE ************************ //\n\n\t// load the todo list that we saved in local storage\n\tuseEffect(() => {\n\t\tconst storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\t\t// if we have stored todos, set the todo list to be those stored todos\n\t\tif(storedTodos) {\n\t\t  setTodos(storedTodos);\n\t\t}\n\t}, []);\n\n\t// saves todo list to our local storage\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n\t}, [todos]);\n\n\n\t// ************************ ADDING ABILITY TO CHECK AND UNCHECK TODOS ************************ //\n\n\tfunction toggleTodo(id) {\n    // create a copy of the current todo list using the spread operator\n\t\tconst newTodos = [...todos];\n\n    // find the todo that matches the id we're looking for\n\t\tconst todo = newTodos.find((todo) => todo.id === id);\n\n    // toggle todo and set the modified list\n\t\ttodo.complete = !todo.complete;\n\t\tsetTodos(newTodos);\n\t}\n\n\n\t// ************************ ADDING A NEW TODO TO EXISTING LIST ************************ //\n\tfunction handleAddTodo(e) {\n\t\tconst name = todoNameRef.current.value;\n\t\tif (name === \"\") {\n\t\t\treturn;\n\t\t}\n\n\t\t// adds the new todo to the list of previous todos\n\t\tsetTodos((prevTodos) => {\n\t\t\treturn [...prevTodos, { id: uuidv4(), name: name, complete: false }];\n\t\t});\n\n\t\t// clear input box once the new todo has been added\n\t\ttodoNameRef.current.value = null;\n\t}\n\n  function handleClearTodos(){\n    const newTodos = todos.filter(todo => !todo.complete)\n    setTodos(newTodos)\n  }\n\n\treturn (\n\t\t<>\n    <div id=\"container\">\n      <h1 id=\"todo-title\">To-do List</h1>\n\n      <div id=\"todo-list\">\n        <div id=\"todos-left\">{todos.filter(todo => !todo.complete).length} tasks left to do:</div>\n        <TodoList todos={todos} toggleTodo={toggleTodo} id=\"todo-items\" />\n        <input ref={todoNameRef} type=\"text\" id=\"todo-input\" placeholder=\"Add a new task\"/>\n        <i class=\"fa-solid fa-circle-plus\" onClick={handleAddTodo} title=\"Add new to-do\" id=\"add-todo-button\"></i>\n        <i class=\"fa-solid fa-trash-can\" onClick={handleClearTodos} title=\"Clear completed to-dos\" id=\"clear-todos-button\"></i>\n      </div>\n    </div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}